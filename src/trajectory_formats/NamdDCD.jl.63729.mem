        - #
        - # Structure to contain DCD trajectories produces with Namd. 
        - #
        - 
        - import FortranFiles
        - 
        - struct NamdDCD
        - 
        -   #
        -   # Mandatory data for things to work
        -   #
       32   filename :: String
        -   stream :: FortranFile # special type of stream required for reading DCD files
        -   nframes :: Int64 
        - 
        -   # This vector must be filled up with the size of the periodic cell, if it
        -   # is not defined in the DCD file. 
        -   sides :: Array{Float64}
        - 
        -   # Data structures of the solute and solvent 
        -   solute :: Selection
        -   solvent :: Selection
        - 
        -   # Coordinates of the solute and solvent atoms in a frame (natoms,3) for each array:
        -   x_solute :: Array{Float64}
        -   x_solvent :: Array{Float64}
        - 
        -   #
        -   # Additional properties that might be required for implementing IO (not necessary for every
        -   # input/output format)
        -   #
        -   sides_in_dcd :: Bool # if the DCD contains, or not, periodic cell information for each frame
        -   lastatom :: Int64 # The last atom to be read from each line
        - 
        -   # Auxiliary vectors to read the coordinates without having the allocate/deallocate every time
        -   sides_read :: Vector{Float64}
        -   x_read :: Vector{Float32}
        -   y_read :: Vector{Float32}
        -   z_read :: Vector{Float32}
        - 
        - end
        - 
        - # This function initializes the structure above, returning the data and the vectors with
        - # appropriate lengths and, importantly, with the i/o stream OPENED, ready to read the first
        - # trajectory frame using the "nextframe" function.
        - 
        - function NamdDCD( filename :: String, solute :: Selection, solvent :: Selection)
        - 
     1008   stream = FortranFile(filename)
        - 
        -   # Read header
      160   IntVec = Vector{Int32}(undef,17)
      128   hdr, read_nframes, IntVec[1:8], ts, IntVec[9:17] = read(stream, FString{4}, Int32, (Int32,8), Float64, (Int32,9))
      272   dummyi, title = read(stream, Int32, FString{80})
       16   read_natoms = read(stream,Int32)
        - 
        -   # Check if dcd file contains axis information
        -   sides_in_dcd = false
        -   x = 0.
        -   try
      608     x = read(stream, [ Float32 for i in 1:read_natoms ])
        -   catch err
        0     sides_in_dcd = true
        -   end
        - 
        -   # rewind and let it ready to read first frame in the first call to nextframe
        0   firstframe(stream)
        - 
        0   nframes = getnframes(stream,sides_in_dcd) 
        0   lastatom = max(maximum(solute.index),maximum(solvent.index))
        - 
        -   # Most commonly the sides of the box are written in each frame of the DCD file, and will
        -   # be updated upon reading the frame. Alternatively, the user must provide the sides in all
        -   # frames by filling up an array with the box side data.
        0   if sides_in_dcd
      112     sides = zeros(Float64,3)
        -   else
        0     sides = zeros(Float64,nframes,3)
        -   end
        - 
  1924400   return NamdDCD( filename, stream, nframes, 
        -                   sides, # sides vector (if in dcd) or array to be filled up later
        -                   solute, solvent,
        -                   zeros(Float64,solute.natoms,3), # solute atom coordinates
        -                   zeros(Float64,solvent.natoms,3), # solvent atom coordinates
        -                   sides_in_dcd, lastatom,
        -                   Vector{Float64}(undef,6), # auxiliary vector to read sides
        -                   Vector{Float32}(undef,lastatom), # auxiliary x
        -                   Vector{Float32}(undef,lastatom), # auxiliary y
        -                   Vector{Float32}(undef,lastatom)  # auxiliary z
        -                 )
        - 
        - end
        - 
        - function Base.show( io :: IO, traj :: NamdDCD )
        -   println(" Trajectory in NamdDCD format containing: ")
        -   println("     $(traj.nframes) frames ") 
        -   println("     Sides in DCD: $(traj.sides_in_dcd) ") 
        - end
        - 
        - #
        - # Function that reads the coordinates of the solute and solvent atoms from
        - # the next frame of the trajectory file 
        - #
        - # The function modifies sides, x_solute and x_solvent within the trajectory structure.
        - # Having these vectors inside the trajectory structure avoids having to allocate
        - # them everytime a new frame is read
        - #
        - 
        - function nextframe!( trajectory:: NamdDCD )
        - 
        -   # Read the sides of the box from the DCD file, otherwise they must be set manually before
        0   if trajectory.sides_in_dcd
        0     read(trajectory.stream,trajectory.sides_read)
        0     trajectory.sides[1] = trajectory.sides_read[1]
        0     trajectory.sides[2] = trajectory.sides_read[3]
        0     trajectory.sides[3] = trajectory.sides_read[6]
        -   end
        -   
        -   # Read the coordinates  
        0   read(trajectory.stream,trajectory.x_read)
        0   read(trajectory.stream,trajectory.y_read)
        0   read(trajectory.stream,trajectory.z_read)
        - 
        -   # Save coordinates of solute and solvent in trajectory arrays
        0   for i in 1:trajectory.solute.natoms
   279200     trajectory.x_solute[i,1] = trajectory.x_read[trajectory.solute.index[i]]
   279200     trajectory.x_solute[i,2] = trajectory.y_read[trajectory.solute.index[i]]
   279200     trajectory.x_solute[i,3] = trajectory.z_read[trajectory.solute.index[i]]
        -   end
        0   for i in 1:trajectory.solvent.natoms
  2696608     trajectory.x_solvent[i,1] = trajectory.x_read[trajectory.solvent.index[i]]
  2696608     trajectory.x_solvent[i,2] = trajectory.y_read[trajectory.solvent.index[i]]
  2696608     trajectory.x_solvent[i,3] = trajectory.z_read[trajectory.solvent.index[i]]
        -   end
        - 
        - end
        - 
        - #
        - # Function that closes the IO Stream of the trajectory
        - #
        - 
        - function closetraj( trajectory :: NamdDCD )
        0   FortranFiles.close(trajectory.stream)
        - end
        - 
        - #
        - # Function that returns a vector of dimension 3 with the sides of the periodic box 
        - # given the way that the box side information is stored in the Trajectory structure
        - #
        - 
        - function getsides(trajectory :: NamdDCD, iframe)
        -   # In this (most common) case, sides is a vector and must only be returned
        0   if trajectory.sides_in_dcd
        0     return trajectory.sides
        -   # otherwise, sides is an array that contains the sides for each frame, and we return the
        -   # vector containing the sides of the current frame
        -   else
        0     return @view(trajectory.sides[iframe,:])
        -   end
        - end
        - 
        - #
        - # Leave DCD file in position to read the first frame
        - #
        - 
        - function firstframe(stream :: FortranFile)
        -     # rewind
        0     rewind(stream)
        -     # skip header
        0     read(stream)
        0     read(stream)
        0     read(stream)
        - end
        0 firstframe( trajectory :: NamdDCD ) = firstframe( trajectory.stream )
        - 
        - #
        - # Auxiliary functions
        - #
        - 
        - #
        - # Sometimes the DCD files contains a wrong number of frames in the header, so to
        - # get the actual number of frames, it is better to read it
        - #
        - 
        - function getnframes(stream :: FortranFile, sides_in_dcd :: Bool )
        0   firstframe(stream)
        -   nframes = 0
        0   while true
        -     try 
        0       if sides_in_dcd
     3200         read(stream,Float64)
        -       end
     3200       read(stream,Float32)
     3200       read(stream,Float32)
     3200       read(stream,Float32)
        0       nframes = nframes + 1
        -     catch
        0       firstframe(stream)
        0       return nframes
        -     end
        -   end
        - end
        - 
        - 
